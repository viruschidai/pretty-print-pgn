{"version":3,"sources":["components/PgnInput.js","models/parser.js","models/game.js","components/ScoreSheet.js","App.js","serviceWorker.js","index.js"],"names":["PgnInput","setPgn","className","placeholder","onChange","e","console","log","target","value","peg$SyntaxError","message","expected","found","location","this","name","Error","captureStackTrace","child","parent","ctor","constructor","prototype","peg$subclass","buildMessage","DESCRIBE_EXPECTATION_FNS","literal","expectation","literalEscape","text","i","escapedParts","parts","length","Array","classEscape","inverted","any","end","other","description","hex","ch","charCodeAt","toString","toUpperCase","s","replace","j","descriptions","type","sort","slice","join","describeExpected","describeFound","SyntaxError","parse","input","options","peg$result","peg$FAILED","peg$startRuleFunctions","start","peg$parsestart","peg$startRuleFunction","peg$c4","peg$c6","peg$literalExpectation","peg$c7","peg$c8","peg$classExpectation","peg$c10","peg$c11","peg$c12","peg$c13","peg$c15","peg$c16","peg$c17","chars","peg$c19","peg$c21","peg$c23","peg$c25","peg$c27","peg$c29","peg$c31","peg$c34","peg$c35","peg$c36","peg$c37","peg$c38","peg$c39","peg$c41","peg$c43","peg$c45","peg$c47","peg$c49","peg$c51","peg$c53","peg$c55","peg$c59","peg$c60","peg$c61","peg$c63","peg$c65","peg$c67","peg$c69","peg$c71","peg$c73","peg$c75","peg$c76","peg$c77","peg$c79","peg$c81","peg$c82","cc","peg$c83","peg$c84","peg$c86","peg$c89","peg$c91","peg$c92","peg$c94","peg$c95","peg$c98","peg$c102","peg$c104","peg$c106","mn","m","n","peg$c107","nags","c2","peg$c108","com","r","peg$c112","peg$c114","peg$currPos","peg$posDetailsCache","line","column","peg$maxFailPos","peg$maxFailExpected","peg$silentFails","startRule","ignoreCase","peg$computePosDetails","pos","p","details","peg$computeLocation","startPos","endPos","startPosDetails","endPosDetails","offset","peg$fail","push","peg$buildStructuredError","s0","s1","s2","s3","s4","s5","peg$parsegame","peg$parseline_feed","charAt","peg$parseEOF","map","g","s6","s7","s8","s9","s10","mr","peg$parsewhitespace","peg$parsecomments","peg$parseheader","peg$parseheaders","peg$parsemovetext","peg$parseresult","c0","h","c1","peg$c2","hs","comments_above_header","headers","comments","moves","result","make_game","peg$parsedouble_quote","peg$parseinteger","test","parseInt","peg$parsews","peg$parseblank","peg$parseform_feed","peg$parsetab","peg$parsecarriage_return","peg$parsesymbol","peg$parsestring","hn","hv","make_header","peg$parsepiece","peg$parserank","peg$parsefile","peg$parsecapture","peg$parseperiod","substr","peg$parsesquare","peg$parsenag","peg$parsemulti_line_comment_chars","peg$parsesingle_line_comment_chars","peg$parsecommand","peg$parsecommand_key","peg$parsecommand_value","first","rest","flatten","filter","cv","peg$parsecommand_values","key","values","peg$parsecomment","c","peg$parsecommand_comment","peg$parsemulti_line_comment","peg$parsesingle_line_comment","commands","peg$parsepawn_half_move","peg$parsepromotion","peg$parsepiece_disambiguation_half_move","peg$parsedisambiguation","peg$parsehalf_move","peg$parsecontinuation","peg$parsecastle_half_move","peg$parsepiece_half_move","peg$parsecheck","peg$parsecheckmate","peg$parsenag_alts","peg$parsemove","peg$parsemove_number","peg$parserav","move_number","move","ravs","make_move","concat","a","acc","isArray","transformGame","rawGame","forEach","item","whiteMoves","blackMoves","index","noOfMoves","transformGames","rawGames","ScoreSheetHeader","Event","White","Black","Result","Date","WhiteElo","BlackElo","Round","title","onClick","window","print","ScoreSheetMoves","startMove","game","trs","renderRows","ScoreSheet","GameScoreSheets","page","Math","ceil","sheets","Games","rawgames","err","pgn","parser","error","renderGames","App","useState","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.453f9b47.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./PgnInput.css\";\n\nfunction PgnInput({ setPgn }) {\n    const onTextChange = function (e) {\n        console.log(\"e\", e, e.target.value);\n        setPgn(e.target.value);\n    };\n    return (\n        <div className=\"PgnInput\">\n            <textarea\n                className=\"PgnInputTextArea\"\n                placeholder=\"Please paste pgn here...\"\n                onChange={onTextChange}\n            ></textarea>\n        </div>\n    );\n}\n\nexport default PgnInput;\n","export default (function() {\n\n  function peg$subclass(child, parent) {\n    function ctor() { this.constructor = child; }\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n  }\n\n  function peg$SyntaxError(message, expected, found, location) {\n    this.message  = message;\n    this.expected = expected;\n    this.found    = found;\n    this.location = location;\n    this.name     = \"SyntaxError\";\n\n    if (typeof Error.captureStackTrace === \"function\") {\n      Error.captureStackTrace(this, peg$SyntaxError);\n    }\n  }\n\n  peg$subclass(peg$SyntaxError, Error);\n\n  peg$SyntaxError.buildMessage = function(expected, found) {\n    var DESCRIBE_EXPECTATION_FNS = {\n          literal: function(expectation) {\n            return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n          },\n\n          \"class\": function(expectation) {\n            var escapedParts = \"\",\n                i;\n\n            for (i = 0; i < expectation.parts.length; i++) {\n              escapedParts += expectation.parts[i] instanceof Array\n                ? classEscape(expectation.parts[i][0]) + \"-\" + classEscape(expectation.parts[i][1])\n                : classEscape(expectation.parts[i]);\n            }\n\n            return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n          },\n\n          any: function(expectation) {\n            return \"any character\";\n          },\n\n          end: function(expectation) {\n            return \"end of input\";\n          },\n\n          other: function(expectation) {\n            return expectation.description;\n          }\n        };\n\n    function hex(ch) {\n      return ch.charCodeAt(0).toString(16).toUpperCase();\n    }\n\n    function literalEscape(s) {\n      return s\n        .replace(/\\\\/g, '\\\\\\\\')\n        .replace(/\"/g,  '\\\\\"')\n        .replace(/\\0/g, '\\\\0')\n        .replace(/\\t/g, '\\\\t')\n        .replace(/\\n/g, '\\\\n')\n        .replace(/\\r/g, '\\\\r')\n        .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n        .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n    }\n\n    function classEscape(s) {\n      return s\n        .replace(/\\\\/g, '\\\\\\\\')\n        .replace(/\\]/g, '\\\\]')\n        .replace(/\\^/g, '\\\\^')\n        .replace(/-/g,  '\\\\-')\n        .replace(/\\0/g, '\\\\0')\n        .replace(/\\t/g, '\\\\t')\n        .replace(/\\n/g, '\\\\n')\n        .replace(/\\r/g, '\\\\r')\n        .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n        .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n    }\n\n    function describeExpectation(expectation) {\n      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n    }\n\n    function describeExpected(expected) {\n      var descriptions = new Array(expected.length),\n          i, j;\n\n      for (i = 0; i < expected.length; i++) {\n        descriptions[i] = describeExpectation(expected[i]);\n      }\n\n      descriptions.sort();\n\n      if (descriptions.length > 0) {\n        for (i = 1, j = 1; i < descriptions.length; i++) {\n          if (descriptions[i - 1] !== descriptions[i]) {\n            descriptions[j] = descriptions[i];\n            j++;\n          }\n        }\n        descriptions.length = j;\n      }\n\n      switch (descriptions.length) {\n        case 1:\n          return descriptions[0];\n\n        case 2:\n          return descriptions[0] + \" or \" + descriptions[1];\n\n        default:\n          return descriptions.slice(0, -1).join(\", \")\n            + \", or \"\n            + descriptions[descriptions.length - 1];\n      }\n    }\n\n    function describeFound(found) {\n      return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n    }\n\n    return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n  };\n\n  function peg$parse(input, options) {\n    options = options !== void 0 ? options : {};\n\n    var peg$FAILED = {},\n\n        peg$startRuleFunctions = { start: peg$parsestart },\n        peg$startRuleFunction  = peg$parsestart,\n\n        peg$c0 = function(gs) {return gs.map(function(g) { return g[0]})},\n        peg$c1 = function(c0, h, c1, m, r) {return [m, r]},\n        peg$c2 = function(c0, h, c1, r) {return [null, r]},\n        peg$c3 = function(c0, h, c1, mr) {return make_game(c0, h, c1, mr[0], mr[1])},\n        peg$c4 = peg$anyExpectation(),\n        peg$c5 = \"\\\"\",\n        peg$c6 = peg$literalExpectation(\"\\\"\", false),\n        peg$c7 = /^[^\"]/,\n        peg$c8 = peg$classExpectation([\"\\\"\"], true, false),\n        peg$c9 = function(str) {return str.join('')},\n        peg$c10 = /^[1-9]/,\n        peg$c11 = peg$classExpectation([[\"1\", \"9\"]], false, false),\n        peg$c12 = /^[0-9]/,\n        peg$c13 = peg$classExpectation([[\"0\", \"9\"]], false, false),\n        peg$c14 = function(a, b) {return parseInt(a+b.join(''), 10)},\n        peg$c15 = /^[A-Za-z0-9_\\-]/,\n        peg$c16 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], [\"0\", \"9\"], \"_\", \"-\"], false, false),\n        peg$c17 = function(chars) {return chars.join('')},\n        peg$c18 = \" \",\n        peg$c19 = peg$literalExpectation(\" \", false),\n        peg$c20 = \"\\f\",\n        peg$c21 = peg$literalExpectation(\"\\f\", false),\n        peg$c22 = \"\\t\",\n        peg$c23 = peg$literalExpectation(\"\\t\", false),\n        peg$c24 = \"\\r\",\n        peg$c25 = peg$literalExpectation(\"\\r\", false),\n        peg$c26 = \"\\n\",\n        peg$c27 = peg$literalExpectation(\"\\n\", false),\n        peg$c28 = \"[\",\n        peg$c29 = peg$literalExpectation(\"[\", false),\n        peg$c30 = \"]\",\n        peg$c31 = peg$literalExpectation(\"]\", false),\n        peg$c32 = function(hn, hv) { return make_header(hn,hv) },\n        peg$c33 = function(hs) {return hs},\n        peg$c34 = /^[NKQRB]/,\n        peg$c35 = peg$classExpectation([\"N\", \"K\", \"Q\", \"R\", \"B\"], false, false),\n        peg$c36 = /^[a-h]/,\n        peg$c37 = peg$classExpectation([[\"a\", \"h\"]], false, false),\n        peg$c38 = /^[1-8]/,\n        peg$c39 = peg$classExpectation([[\"1\", \"8\"]], false, false),\n        peg$c40 = \"+\",\n        peg$c41 = peg$literalExpectation(\"+\", false),\n        peg$c42 = \"#\",\n        peg$c43 = peg$literalExpectation(\"#\", false),\n        peg$c44 = \"x\",\n        peg$c45 = peg$literalExpectation(\"x\", false),\n        peg$c46 = \".\",\n        peg$c47 = peg$literalExpectation(\".\", false),\n        peg$c48 = \"1-0\",\n        peg$c49 = peg$literalExpectation(\"1-0\", false),\n        peg$c50 = \"0-1\",\n        peg$c51 = peg$literalExpectation(\"0-1\", false),\n        peg$c52 = \"*\",\n        peg$c53 = peg$literalExpectation(\"*\", false),\n        peg$c54 = \"1/2-1/2\",\n        peg$c55 = peg$literalExpectation(\"1/2-1/2\", false),\n        peg$c56 = function(mn) {return mn},\n        peg$c57 = function(r, f) {return r+f},\n        peg$c58 = \"=\",\n        peg$c59 = peg$literalExpectation(\"=\", false),\n        peg$c60 = /^[QRBN]/,\n        peg$c61 = peg$classExpectation([\"Q\", \"R\", \"B\", \"N\"], false, false),\n        peg$c62 = \"$\",\n        peg$c63 = peg$literalExpectation(\"$\", false),\n        peg$c64 = \"!!\",\n        peg$c65 = peg$literalExpectation(\"!!\", false),\n        peg$c66 = \"??\",\n        peg$c67 = peg$literalExpectation(\"??\", false),\n        peg$c68 = \"!?\",\n        peg$c69 = peg$literalExpectation(\"!?\", false),\n        peg$c70 = \"?!\",\n        peg$c71 = peg$literalExpectation(\"?!\", false),\n        peg$c72 = \"!\",\n        peg$c73 = peg$literalExpectation(\"!\", false),\n        peg$c74 = \"?\",\n        peg$c75 = peg$literalExpectation(\"?\", false),\n        peg$c76 = /^[^}]/,\n        peg$c77 = peg$classExpectation([\"}\"], true, false),\n        peg$c78 = \"{\",\n        peg$c79 = peg$literalExpectation(\"{\", false),\n        peg$c80 = \"}\",\n        peg$c81 = peg$literalExpectation(\"}\", false),\n        peg$c82 = function(cc) {return cc.join('');},\n        peg$c83 = /^[^\\n]/,\n        peg$c84 = peg$classExpectation([\"\\n\"], true, false),\n        peg$c85 = \";\",\n        peg$c86 = peg$literalExpectation(\";\", false),\n        peg$c87 = function(cs) {return cs;},\n        peg$c88 = \"[%\",\n        peg$c89 = peg$literalExpectation(\"[%\", false),\n        peg$c90 = function(key, values) {return {key, values};},\n        peg$c91 = /^[a-zA-Z]/,\n        peg$c92 = peg$classExpectation([[\"a\", \"z\"], [\"A\", \"Z\"]], false, false),\n        peg$c93 = function(k) {return k.join('');},\n        peg$c94 = /^[^,\\]]/,\n        peg$c95 = peg$classExpectation([\",\", \"]\"], true, false),\n        peg$c96 = function(v) {return v.join('');},\n        peg$c97 = \",\",\n        peg$c98 = peg$literalExpectation(\",\", false),\n        peg$c99 = function(first, rest) {return rest ? [first, ...flatten(rest).filter(function (cv) { return cv !== ','})] : [first];},\n        peg$c100 = function(c) {return typeof c === 'string' ? {text: c} : {commands: c};},\n        peg$c101 = \"O-O-O\",\n        peg$c102 = peg$literalExpectation(\"O-O-O\", false),\n        peg$c103 = \"O-O\",\n        peg$c104 = peg$literalExpectation(\"O-O\", false),\n        peg$c105 = function(m) {return flatten(m).join('');},\n        peg$c106 = function(mn, m, n) {return n},\n        peg$c107 = function(mn, m, nags, c2) {return c2},\n        peg$c108 = function(mn, m, nags, com, r) {return r},\n        peg$c109 = function(mn, m, nags, com, ravs) {return make_move(mn, m, nags, ravs, com)},\n        peg$c110 = function(first, rest) {return first ? [first].concat(rest.map(function(m) {return m[1]})) : []},\n        peg$c111 = \"(\",\n        peg$c112 = peg$literalExpectation(\"(\", false),\n        peg$c113 = \")\",\n        peg$c114 = peg$literalExpectation(\")\", false),\n        peg$c115 = function(m, r) {return make_rav(m, r)},\n\n        peg$currPos          = 0,\n        peg$savedPos         = 0,\n        peg$posDetailsCache  = [{ line: 1, column: 1 }],\n        peg$maxFailPos       = 0,\n        peg$maxFailExpected  = [],\n        peg$silentFails      = 0,\n\n        peg$result;\n\n    if (\"startRule\" in options) {\n      if (!(options.startRule in peg$startRuleFunctions)) {\n        throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n      }\n\n      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n    }\n\n    function text() {\n      return input.substring(peg$savedPos, peg$currPos);\n    }\n\n    function location() {\n      return peg$computeLocation(peg$savedPos, peg$currPos);\n    }\n\n    function expected(description, location) {\n      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n      throw peg$buildStructuredError(\n        [peg$otherExpectation(description)],\n        input.substring(peg$savedPos, peg$currPos),\n        location\n      );\n    }\n\n    function error(message, location) {\n      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n      throw peg$buildSimpleError(message, location);\n    }\n\n    function peg$literalExpectation(text, ignoreCase) {\n      return { type: \"literal\", text: text, ignoreCase: ignoreCase };\n    }\n\n    function peg$classExpectation(parts, inverted, ignoreCase) {\n      return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n    }\n\n    function peg$anyExpectation() {\n      return { type: \"any\" };\n    }\n\n    function peg$endExpectation() {\n      return { type: \"end\" };\n    }\n\n    function peg$otherExpectation(description) {\n      return { type: \"other\", description: description };\n    }\n\n    function peg$computePosDetails(pos) {\n      var details = peg$posDetailsCache[pos], p;\n\n      if (details) {\n        return details;\n      } else {\n        p = pos - 1;\n        while (!peg$posDetailsCache[p]) {\n          p--;\n        }\n\n        details = peg$posDetailsCache[p];\n        details = {\n          line:   details.line,\n          column: details.column\n        };\n\n        while (p < pos) {\n          if (input.charCodeAt(p) === 10) {\n            details.line++;\n            details.column = 1;\n          } else {\n            details.column++;\n          }\n\n          p++;\n        }\n\n        peg$posDetailsCache[pos] = details;\n        return details;\n      }\n    }\n\n    function peg$computeLocation(startPos, endPos) {\n      var startPosDetails = peg$computePosDetails(startPos),\n          endPosDetails   = peg$computePosDetails(endPos);\n\n      return {\n        start: {\n          offset: startPos,\n          line:   startPosDetails.line,\n          column: startPosDetails.column\n        },\n        end: {\n          offset: endPos,\n          line:   endPosDetails.line,\n          column: endPosDetails.column\n        }\n      };\n    }\n\n    function peg$fail(expected) {\n      if (peg$currPos < peg$maxFailPos) { return; }\n\n      if (peg$currPos > peg$maxFailPos) {\n        peg$maxFailPos = peg$currPos;\n        peg$maxFailExpected = [];\n      }\n\n      peg$maxFailExpected.push(expected);\n    }\n\n    function peg$buildSimpleError(message, location) {\n      return new peg$SyntaxError(message, null, null, location);\n    }\n\n    function peg$buildStructuredError(expected, found, location) {\n      return new peg$SyntaxError(\n        peg$SyntaxError.buildMessage(expected, found),\n        expected,\n        found,\n        location\n      );\n    }\n\n    function peg$parsestart() {\n      var s0, s1, s2, s3, s4, s5;\n\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$currPos;\n      s3 = peg$parsegame();\n      if (s3 !== peg$FAILED) {\n        s4 = [];\n        s5 = peg$parseline_feed();\n        while (s5 !== peg$FAILED) {\n          s4.push(s5);\n          s5 = peg$parseline_feed();\n        }\n        if (s4 !== peg$FAILED) {\n          s3 = [s3, s4];\n          s2 = s3;\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$currPos;\n        s3 = peg$parsegame();\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$parseline_feed();\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parseline_feed();\n          }\n          if (s4 !== peg$FAILED) {\n            s3 = [s3, s4];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseEOF();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c0(s1);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsegame() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\n\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parsewhitespace();\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parsewhitespace();\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsecomments();\n        if (s2 === peg$FAILED) {\n          s2 = null;\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$parsewhitespace();\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$parsewhitespace();\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseheaders();\n            if (s4 === peg$FAILED) {\n              s4 = null;\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsecomments();\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = [];\n                s7 = peg$parsewhitespace();\n                while (s7 !== peg$FAILED) {\n                  s6.push(s7);\n                  s7 = peg$parsewhitespace();\n                }\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$currPos;\n                  s8 = peg$parsemovetext();\n                  if (s8 !== peg$FAILED) {\n                    s9 = [];\n                    s10 = peg$parsewhitespace();\n                    if (s10 !== peg$FAILED) {\n                      while (s10 !== peg$FAILED) {\n                        s9.push(s10);\n                        s10 = peg$parsewhitespace();\n                      }\n                    } else {\n                      s9 = peg$FAILED;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parseresult();\n                      if (s10 !== peg$FAILED) {\n                        peg$savedPos = s7;\n                        s8 = peg$c1(s2, s4, s5, s8, s10);\n                        s7 = s8;\n                      } else {\n                        peg$currPos = s7;\n                        s7 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s7;\n                      s7 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s7;\n                    s7 = peg$FAILED;\n                  }\n                  if (s7 === peg$FAILED) {\n                    s7 = peg$currPos;\n                    s8 = peg$parseresult();\n                    if (s8 !== peg$FAILED) {\n                      peg$savedPos = s7;\n                      s8 = peg$c2(s2, s4, s5, s8);\n                    }\n                    s7 = s8;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = [];\n                    s9 = peg$parsewhitespace();\n                    while (s9 !== peg$FAILED) {\n                      s8.push(s9);\n                      s9 = peg$parsewhitespace();\n                    }\n                    if (s8 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c3(s2, s4, s5, s7);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseEOF() {\n      var s0, s1;\n\n      s0 = peg$currPos;\n      peg$silentFails++;\n      if (input.length > peg$currPos) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c4); }\n      }\n      peg$silentFails--;\n      if (s1 === peg$FAILED) {\n        s0 = void 0;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsedouble_quote() {\n      var s0;\n\n      if (input.charCodeAt(peg$currPos) === 34) {\n        s0 = peg$c5;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c6); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsestring() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      s1 = peg$parsedouble_quote();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        if (peg$c7.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c8); }\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c7.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c8); }\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsedouble_quote();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c9(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseinteger() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      if (peg$c10.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c11); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        if (peg$c12.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c13); }\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c12.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c13); }\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c14(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsesymbol() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = [];\n      if (peg$c15.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c16); }\n      }\n      if (s2 !== peg$FAILED) {\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          if (peg$c15.test(input.charAt(peg$currPos))) {\n            s2 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c16); }\n          }\n        }\n      } else {\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parseblank() {\n      var s0;\n\n      if (input.charCodeAt(peg$currPos) === 32) {\n        s0 = peg$c18;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c19); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseform_feed() {\n      var s0;\n\n      if (input.charCodeAt(peg$currPos) === 12) {\n        s0 = peg$c20;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c21); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsetab() {\n      var s0;\n\n      if (input.charCodeAt(peg$currPos) === 9) {\n        s0 = peg$c22;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c23); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsecarriage_return() {\n      var s0;\n\n      if (input.charCodeAt(peg$currPos) === 13) {\n        s0 = peg$c24;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c25); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseline_feed() {\n      var s0;\n\n      if (input.charCodeAt(peg$currPos) === 10) {\n        s0 = peg$c26;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c27); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsews() {\n      var s0;\n\n      s0 = peg$parseblank();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseform_feed();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsetab();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsecarriage_return();\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parsewhitespace() {\n      var s0;\n\n      s0 = peg$parsews();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseline_feed();\n      }\n\n      return s0;\n    }\n\n    function peg$parseheader() {\n      var s0, s1, s2, s3, s4, s5, s6, s7;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 91) {\n        s1 = peg$c28;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c29); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsesymbol();\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$parsews();\n          if (s4 !== peg$FAILED) {\n            while (s4 !== peg$FAILED) {\n              s3.push(s4);\n              s4 = peg$parsews();\n            }\n          } else {\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parsestring();\n            if (s4 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 93) {\n                s5 = peg$c30;\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c31); }\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = [];\n                s7 = peg$parsewhitespace();\n                while (s7 !== peg$FAILED) {\n                  s6.push(s7);\n                  s7 = peg$parsewhitespace();\n                }\n                if (s6 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c32(s2, s4);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseheaders() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parseheader();\n      if (s2 !== peg$FAILED) {\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          s2 = peg$parseheader();\n        }\n      } else {\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c33(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parsepiece() {\n      var s0;\n\n      if (peg$c34.test(input.charAt(peg$currPos))) {\n        s0 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c35); }\n      }\n\n      return s0;\n    }\n\n    function peg$parserank() {\n      var s0;\n\n      if (peg$c36.test(input.charAt(peg$currPos))) {\n        s0 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c37); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsefile() {\n      var s0;\n\n      if (peg$c38.test(input.charAt(peg$currPos))) {\n        s0 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c39); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsecheck() {\n      var s0;\n\n      if (input.charCodeAt(peg$currPos) === 43) {\n        s0 = peg$c40;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c41); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsecheckmate() {\n      var s0;\n\n      if (input.charCodeAt(peg$currPos) === 35) {\n        s0 = peg$c42;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c43); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsecapture() {\n      var s0;\n\n      if (input.charCodeAt(peg$currPos) === 120) {\n        s0 = peg$c44;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c45); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseperiod() {\n      var s0;\n\n      if (input.charCodeAt(peg$currPos) === 46) {\n        s0 = peg$c46;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c47); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseresult() {\n      var s0;\n\n      if (input.substr(peg$currPos, 3) === peg$c48) {\n        s0 = peg$c48;\n        peg$currPos += 3;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c49); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 3) === peg$c50) {\n          s0 = peg$c50;\n          peg$currPos += 3;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c51); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 42) {\n            s0 = peg$c52;\n            peg$currPos++;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c53); }\n          }\n          if (s0 === peg$FAILED) {\n            if (input.substr(peg$currPos, 7) === peg$c54) {\n              s0 = peg$c54;\n              peg$currPos += 7;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c55); }\n            }\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parsemove_number() {\n      var s0, s1, s2, s3, s4, s5;\n\n      s0 = peg$currPos;\n      s1 = peg$parseinteger();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseperiod();\n        if (s2 === peg$FAILED) {\n          s2 = null;\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          s4 = peg$parseperiod();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseperiod();\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c56(s1);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsesquare() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = peg$parserank();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsefile();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c57(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsepromotion() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 61) {\n        s1 = peg$c58;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c59); }\n      }\n      if (s1 !== peg$FAILED) {\n        if (peg$c60.test(input.charAt(peg$currPos))) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c61); }\n        }\n        if (s2 !== peg$FAILED) {\n          s1 = [s1, s2];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsenag() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 36) {\n        s2 = peg$c62;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c63); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseinteger();\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parsenag_alts() {\n      var s0;\n\n      if (input.substr(peg$currPos, 2) === peg$c64) {\n        s0 = peg$c64;\n        peg$currPos += 2;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c65); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 2) === peg$c66) {\n          s0 = peg$c66;\n          peg$currPos += 2;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c67); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.substr(peg$currPos, 2) === peg$c68) {\n            s0 = peg$c68;\n            peg$currPos += 2;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c69); }\n          }\n          if (s0 === peg$FAILED) {\n            if (input.substr(peg$currPos, 2) === peg$c70) {\n              s0 = peg$c70;\n              peg$currPos += 2;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c71); }\n            }\n            if (s0 === peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 33) {\n                s0 = peg$c72;\n                peg$currPos++;\n              } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c73); }\n              }\n              if (s0 === peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 63) {\n                  s0 = peg$c74;\n                  peg$currPos++;\n                } else {\n                  s0 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c75); }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parsecontinuation() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      s1 = peg$parseperiod();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseperiod();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseperiod();\n          if (s3 !== peg$FAILED) {\n            s1 = [s1, s2, s3];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsedisambiguation() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = peg$parserank();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsefile();\n        if (s2 !== peg$FAILED) {\n          s1 = [s1, s2];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$parserank();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsefile();\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parsemulti_line_comment_chars() {\n      var s0;\n\n      if (peg$c76.test(input.charAt(peg$currPos))) {\n        s0 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c77); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsemulti_line_comment() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 123) {\n        s1 = peg$c78;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c79); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$parsemulti_line_comment_chars();\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parsemulti_line_comment_chars();\n        }\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 125) {\n            s3 = peg$c80;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c81); }\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c82(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsesingle_line_comment_chars() {\n      var s0;\n\n      if (peg$c83.test(input.charAt(peg$currPos))) {\n        s0 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c84); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsesingle_line_comment() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 59) {\n        s1 = peg$c85;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c86); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$parsesingle_line_comment_chars();\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parsesingle_line_comment_chars();\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseline_feed();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c82(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsecommand_comment() {\n      var s0, s1, s2, s3, s4, s5;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 123) {\n        s1 = peg$c78;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c79); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$parsewhitespace();\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parsewhitespace();\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$parsecommand();\n          if (s4 !== peg$FAILED) {\n            while (s4 !== peg$FAILED) {\n              s3.push(s4);\n              s4 = peg$parsecommand();\n            }\n          } else {\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = [];\n            s5 = peg$parsewhitespace();\n            while (s5 !== peg$FAILED) {\n              s4.push(s5);\n              s5 = peg$parsewhitespace();\n            }\n            if (s4 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 125) {\n                s5 = peg$c80;\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c81); }\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c87(s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsecommand() {\n      var s0, s1, s2, s3, s4, s5;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 2) === peg$c88) {\n        s1 = peg$c88;\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c89); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsecommand_key();\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$parsewhitespace();\n          if (s4 !== peg$FAILED) {\n            while (s4 !== peg$FAILED) {\n              s3.push(s4);\n              s4 = peg$parsewhitespace();\n            }\n          } else {\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parsecommand_values();\n            if (s4 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 93) {\n                s5 = peg$c30;\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c31); }\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c90(s2, s4);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsecommand_key() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = [];\n      if (peg$c91.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c92); }\n      }\n      if (s2 !== peg$FAILED) {\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          if (peg$c91.test(input.charAt(peg$currPos))) {\n            s2 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c92); }\n          }\n        }\n      } else {\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c93(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parsecommand_value() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = [];\n      if (peg$c94.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c95); }\n      }\n      if (s2 !== peg$FAILED) {\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          if (peg$c94.test(input.charAt(peg$currPos))) {\n            s2 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c95); }\n          }\n        }\n      } else {\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c96(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parsecommand_values() {\n      var s0, s1, s2, s3, s4, s5;\n\n      s0 = peg$currPos;\n      s1 = peg$parsecommand_value();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 44) {\n          s4 = peg$c97;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c98); }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsecommand_value();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 44) {\n            s4 = peg$c97;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c98); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecommand_value();\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c99(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsecomment() {\n      var s0, s1;\n\n      s0 = peg$currPos;\n      s1 = peg$parsecommand_comment();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parsemulti_line_comment();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parsesingle_line_comment();\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c100(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parsecomments() {\n      var s0, s1, s2, s3;\n\n      s0 = [];\n      s1 = peg$currPos;\n      s2 = [];\n      s3 = peg$parsewhitespace();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsewhitespace();\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecomment();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s1;\n          s2 = peg$c87(s3);\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        while (s1 !== peg$FAILED) {\n          s0.push(s1);\n          s1 = peg$currPos;\n          s2 = [];\n          s3 = peg$parsewhitespace();\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            s3 = peg$parsewhitespace();\n          }\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parsecomment();\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s1;\n              s2 = peg$c87(s3);\n              s1 = s2;\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        }\n      } else {\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsepawn_half_move() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$parserank();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecapture();\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsesquare();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsepromotion();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s1 = [s1, s2, s3];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsepiece_half_move() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      s1 = peg$parsepiece();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsecapture();\n        if (s2 === peg$FAILED) {\n          s2 = null;\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsesquare();\n          if (s3 !== peg$FAILED) {\n            s1 = [s1, s2, s3];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsepiece_disambiguation_half_move() {\n      var s0, s1, s2, s3, s4;\n\n      s0 = peg$currPos;\n      s1 = peg$parsepiece();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsedisambiguation();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsecapture();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parsesquare();\n            if (s4 !== peg$FAILED) {\n              s1 = [s1, s2, s3, s4];\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsecastle_half_move() {\n      var s0;\n\n      if (input.substr(peg$currPos, 5) === peg$c101) {\n        s0 = peg$c101;\n        peg$currPos += 5;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c102); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 3) === peg$c103) {\n          s0 = peg$c103;\n          peg$currPos += 3;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c104); }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parsehalf_move() {\n      var s0, s1, s2, s3, s4, s5;\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$parsecontinuation();\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecastle_half_move();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parsepiece_disambiguation_half_move();\n          if (s3 === peg$FAILED) {\n            s3 = peg$parsepiece_half_move();\n            if (s3 === peg$FAILED) {\n              s3 = peg$parsepawn_half_move();\n            }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsecheck();\n          if (s4 === peg$FAILED) {\n            s4 = peg$parsecheckmate();\n          }\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsenag_alts();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s2 = [s2, s3, s4, s5];\n              s1 = s2;\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c105(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parsemove() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n      s0 = peg$currPos;\n      s1 = peg$parsemove_number();\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$parsewhitespace();\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parsewhitespace();\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsehalf_move();\n          if (s3 !== peg$FAILED) {\n            s4 = [];\n            s5 = peg$currPos;\n            s6 = [];\n            s7 = peg$parsewhitespace();\n            if (s7 !== peg$FAILED) {\n              while (s7 !== peg$FAILED) {\n                s6.push(s7);\n                s7 = peg$parsewhitespace();\n              }\n            } else {\n              s6 = peg$FAILED;\n            }\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsenag();\n              if (s7 !== peg$FAILED) {\n                peg$savedPos = s5;\n                s6 = peg$c106(s1, s3, s7);\n                s5 = s6;\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n            while (s5 !== peg$FAILED) {\n              s4.push(s5);\n              s5 = peg$currPos;\n              s6 = [];\n              s7 = peg$parsewhitespace();\n              if (s7 !== peg$FAILED) {\n                while (s7 !== peg$FAILED) {\n                  s6.push(s7);\n                  s7 = peg$parsewhitespace();\n                }\n              } else {\n                s6 = peg$FAILED;\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsenag();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s5;\n                  s6 = peg$c106(s1, s3, s7);\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = [];\n              s6 = peg$currPos;\n              s7 = [];\n              s8 = peg$parsewhitespace();\n              if (s8 !== peg$FAILED) {\n                while (s8 !== peg$FAILED) {\n                  s7.push(s8);\n                  s8 = peg$parsewhitespace();\n                }\n              } else {\n                s7 = peg$FAILED;\n              }\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parsecomment();\n                if (s8 !== peg$FAILED) {\n                  peg$savedPos = s6;\n                  s7 = peg$c107(s1, s3, s4, s8);\n                  s6 = s7;\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              }\n              while (s6 !== peg$FAILED) {\n                s5.push(s6);\n                s6 = peg$currPos;\n                s7 = [];\n                s8 = peg$parsewhitespace();\n                if (s8 !== peg$FAILED) {\n                  while (s8 !== peg$FAILED) {\n                    s7.push(s8);\n                    s8 = peg$parsewhitespace();\n                  }\n                } else {\n                  s7 = peg$FAILED;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parsecomment();\n                  if (s8 !== peg$FAILED) {\n                    peg$savedPos = s6;\n                    s7 = peg$c107(s1, s3, s4, s8);\n                    s6 = s7;\n                  } else {\n                    peg$currPos = s6;\n                    s6 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$FAILED;\n                }\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = [];\n                s7 = peg$currPos;\n                s8 = [];\n                s9 = peg$parsewhitespace();\n                if (s9 !== peg$FAILED) {\n                  while (s9 !== peg$FAILED) {\n                    s8.push(s9);\n                    s9 = peg$parsewhitespace();\n                  }\n                } else {\n                  s8 = peg$FAILED;\n                }\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parserav();\n                  if (s9 !== peg$FAILED) {\n                    peg$savedPos = s7;\n                    s8 = peg$c108(s1, s3, s4, s5, s9);\n                    s7 = s8;\n                  } else {\n                    peg$currPos = s7;\n                    s7 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s7;\n                  s7 = peg$FAILED;\n                }\n                while (s7 !== peg$FAILED) {\n                  s6.push(s7);\n                  s7 = peg$currPos;\n                  s8 = [];\n                  s9 = peg$parsewhitespace();\n                  if (s9 !== peg$FAILED) {\n                    while (s9 !== peg$FAILED) {\n                      s8.push(s9);\n                      s9 = peg$parsewhitespace();\n                    }\n                  } else {\n                    s8 = peg$FAILED;\n                  }\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parserav();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s7;\n                      s8 = peg$c108(s1, s3, s4, s5, s9);\n                      s7 = s8;\n                    } else {\n                      peg$currPos = s7;\n                      s7 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s7;\n                    s7 = peg$FAILED;\n                  }\n                }\n                if (s6 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c109(s1, s3, s4, s5, s6);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsemovetext() {\n      var s0, s1, s2, s3, s4, s5;\n\n      s0 = peg$currPos;\n      s1 = peg$parsemove();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = [];\n        s5 = peg$parsewhitespace();\n        if (s5 !== peg$FAILED) {\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parsewhitespace();\n          }\n        } else {\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsemove();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = [];\n          s5 = peg$parsewhitespace();\n          if (s5 !== peg$FAILED) {\n            while (s5 !== peg$FAILED) {\n              s4.push(s5);\n              s5 = peg$parsewhitespace();\n            }\n          } else {\n            s4 = peg$FAILED;\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsemove();\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c110(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parserav() {\n      var s0, s1, s2, s3, s4, s5, s6, s7;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s1 = peg$c111;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c112); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$parsewhitespace();\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parsewhitespace();\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsemovetext();\n          if (s3 !== peg$FAILED) {\n            s4 = [];\n            s5 = peg$parsewhitespace();\n            while (s5 !== peg$FAILED) {\n              s4.push(s5);\n              s5 = peg$parsewhitespace();\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseresult();\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = [];\n                s7 = peg$parsewhitespace();\n                while (s7 !== peg$FAILED) {\n                  s6.push(s7);\n                  s7 = peg$parsewhitespace();\n                }\n                if (s6 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 41) {\n                    s7 = peg$c113;\n                    peg$currPos++;\n                  } else {\n                    s7 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c114); }\n                  }\n                  if (s7 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c115(s3, s5);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n\n        function flatten(a, acc = []) {\n            for (var i = 0; i < a.length; i++) {\n                if (Array.isArray(a[i])) {\n                    flatten(a[i], acc);\n                } else {\n                    acc.push(a[i]);\n                }\n            }\n            return acc;\n        }\n        function make_header(hn,hv) {\n            return {\n                name: hn,\n                value: hv\n            };\n        }\n        function make_move(move_number, move, nags, ravs, comments) {\n            var m = {};\n            if (move_number) m.move_number = move_number;\n            if (move) m.move = move;\n            if (nags && nags.length) m.nags = nags;\n            if (ravs && ravs.length) m.ravs = ravs;\n            if (comments) m.comments = comments;\n            return m;\n        }\n        function make_rav(moves, result) {\n            return {\n                moves, \n                result\n            };\n        }\n        function make_game(c0, hs, c1, m, r) {\n            return {\n                comments_above_header: c0,\n                headers: hs, \n                comments: c1,\n                moves: m || [],\n                result: r\n            };\n        }\n\n\n    peg$result = peg$startRuleFunction();\n\n    if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n      return peg$result;\n    } else {\n      if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n        peg$fail(peg$endExpectation());\n      }\n\n      throw peg$buildStructuredError(\n        peg$maxFailExpected,\n        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n        peg$maxFailPos < input.length\n          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n      );\n    }\n  }\n\n  return {\n    SyntaxError: peg$SyntaxError,\n    parse:       peg$parse\n  };\n})();\n","// Format the games from parser to something easier to use in views\n// Mainly convert the headers to an object from an array\nfunction transformGames(rawGames) {\n    if (!rawGames) return [];\n    return rawGames.map(transformGame)\n}\n\nfunction transformGame(rawGame) {\n    const headers = {};\n    rawGame.headers.forEach((item) => {\n        headers[item.name] = item.value;\n    });\n\n    const whiteMoves = [], blackMoves = [];\n    rawGame.moves.forEach((move, index) => {\n        if (index % 2 === 0) {\n            whiteMoves.push(move)\n        } else {\n            blackMoves.push(move)\n        }\n    })\n\n    return {\n        headers: headers,\n        whiteMoves,\n        blackMoves,\n        noOfMoves: whiteMoves.length,\n        result: rawGame.result,\n    }\n}\n\nexport default transformGames;\n","import React from \"react\";\nimport parser from \"../models/parser\";\nimport \"./ScoreSheet.css\";\nimport transformGames from \"../models/game\";\n\nfunction ScoreSheetHeader({ headers }) {\n    const {\n        Event,\n        White,\n        Black,\n        Result,\n        Date,\n        WhiteElo,\n        BlackElo,\n        Round,\n    } = headers;\n    return (\n        <>\n            <h2>\n                <i className=\"fas fa-chess ChessLogo\"></i>\n                <div className=\"Event Ellipsis\">\n                    {Event} {Round && \"- Round\" + Round} {Date && Date}\n                </div>\n\n                <div className=\"no-print ActionBtn\" title=\"print\" onClick={() => window.print()}><i className=\"fas fa-print\"></i></div>\n            </h2>\n\n            <div className=\"flex-container\">\n                <div className=\"flex-item Players Ellipsis\">\n                    {White}\n                    {WhiteElo !== \"?\" ? `(#{WhiteElo})` : \"\"}{\" \"}\n                    <b>\n                        <em>&#9876;</em>\n                    </b>{\" \"}\n                    {Black}\n                    {BlackElo !== \"?\" ? `(#{BlackElo})` : \"\"}\n                </div>\n                <div className=\"flex-item Result\">Results: {Result}</div>\n            </div>\n        </>\n    );\n}\n\nfunction renderRows(startMove, game) {\n    const { whiteMoves, blackMoves } = game;\n    const trs = [];\n    for (let i = startMove; i < startMove + 30; i++) {\n        trs.push(\n            <tr className={i % 2 === 0 ? \"even\" : \"odd\"} key={startMove + i}>\n                <td className=\"ScoreSheetID\">{i}</td>\n                <td>{whiteMoves[i - 1] && whiteMoves[i - 1].move}</td>\n                <td>{blackMoves[i - 1] && blackMoves[i - 1].move}</td>\n                <td className=\"ScoreSheetID\">{i + 30}</td>\n                <td>{whiteMoves[i + 29] && whiteMoves[i + 29].move}</td>\n                <td>{blackMoves[i + 29] && blackMoves[i + 29].move}</td>\n            </tr>\n        );\n    }\n\n    return trs;\n}\n\nfunction ScoreSheetMoves({ startMove, game }) {\n    return (\n        <table>\n            <thead>\n                <tr>\n                    <th className=\"ScoreSheetID\">#</th>\n                    <th>White</th>\n                    <th>Black</th>\n                    <th className=\"ScoreSheetID\">#</th>\n                    <th>White</th>\n                    <th>Black</th>\n                </tr>\n            </thead>\n            <tbody>{renderRows(startMove, game)}</tbody>\n        </table>\n    );\n}\n\nfunction ScoreSheet({ game, index }) {\n    const { headers } = game;\n\n    return (\n        <div className=\"ScoreSheet\">\n            <ScoreSheetHeader key={`header#{index}`} headers={headers} />\n            <ScoreSheetMoves\n                key={`sheet#{index}`}\n                startMove={index * 60 + 1}\n                game={game}\n            ></ScoreSheetMoves>\n        </div>\n    );\n}\n\nfunction GameScoreSheets({ game, index }) {\n    const page = Math.ceil(game.noOfMoves / 60);\n\n    const sheets = [];\n    for (let i = 0; i < page; i++) {\n        sheets.push(\n            <ScoreSheet\n                key={`ScoreSheet-${i}`}\n                game={game}\n                index={i}\n            ></ScoreSheet>\n        );\n    }\n\n    return <>{sheets}</>;\n}\n\nexport function Games({ pgn }) {\n    let rawgames, err;\n\n    try {\n        rawgames = parser.parse(pgn);\n    } catch (error) {\n        err = error;\n    }\n\n    const renderGames = function (rawgames) {\n        if (!rawgames || !rawgames.length) return null;\n        const games = transformGames(rawgames);\n        return games.map((game, index) => {\n            return (\n                <GameScoreSheets\n                    key={`gamescoresheet-${index}`}\n                    game={game}\n                ></GameScoreSheets>\n            );\n        });\n    };\n    return (\n        <>\n            {err && (\n                <div className=\"no-print Error\">\n                    Failed to parse the PGN, please check to make sure the\n                    syntax is correct\n                </div>\n            )}\n            {!err && renderGames(rawgames)}\n        </>\n    );\n}\n\nexport default Games;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport PgnInput from \"./components/PgnInput\";\n\nimport Games from \"./components/ScoreSheet\";\n\nconst defaultGame = `\n[Event \"Belfort World Cup\"]\n[Site \"Belfort FRA\"]\n[Date \"1988.07.01\"]\n[EventDate \"?\"]\n[Round \"14\"]\n[Result \"1-0\"]\n[White \"Anatoly Karpov\"]\n[Black \"Garry Kasparov\"]\n[ECO \"D87\"]\n[WhiteElo \"?\"]\n[BlackElo \"?\"]\n[PlyCount \"75\"]\n\n1.d4 Nf6 2.c4 g6 3.Nc3 d5 4.cxd5 Nxd5 5.e4 Nxc3 6.bxc3 Bg7\n7.Bc4 c5 8.Ne2 Nc6 9.Be3 O-O 10.O-O Bg4 11.f3 Na5 12.Bxf7+\nRxf7 13.fxg4 Rxf1+ 14.Kxf1 Qd6 15.e5 Qd5 16.Bf2 Rd8 17.Qa4 b6\n18.Qc2 Rf8 19.Kg1 Qc4 20.Qd2 Qe6 21.h3 Nc4 22.Qg5 h6 23.Qc1\nQf7 24.Bg3 g5 25.Qc2 Qd5 26.Bf2 b5 27.Ng3 Rf7 28.Re1 b4 29.Qg6\nKf8 30.Ne4 Rxf2 31.Kxf2 bxc3 32.Qf5+ Kg8 33.Qc8+ Kh7 34.Qxc5\nQf7+ 35.Kg1 c2 36.Ng3 Bf8 37.Nf5 Kg8 38.Rc1 1-0\n`\nfunction App() {\n    const [pgn, setPgn] = useState(defaultGame);\n\n    return (\n        <div className=\"App\">\n            <div className=\"Header no-print\">\n                <h1 className=\"no-print\">Pretty Print Chess Game PGNs</h1>\n                <p>Print PGNs in a scoresheet like style</p>\n                <div className=\"no-print\">\n                    <PgnInput setPgn={setPgn}></PgnInput>\n                </div>\n            </div>\n            <Games pgn={pgn}></Games>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}